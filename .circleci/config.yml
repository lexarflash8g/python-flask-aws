version: 2.1
jobs:
commands:
  destroy-environment:
    description: Destroy cloudformation infrastructure if build fails
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "kubernetes-${CIRCLE_WORKFLOW_ID}" 

  lint:
    docker:
      - image: python:3
    working_directory: ~/repo
    steps:
      - checkout
# Download and cache dependencies
      - restore_cache:
          keys:
           - v1-dependencies-{{ checksum "requirements.txt" }}
# fallback to using the latest cache if no exact match is found
           - v1-dependencies-
      - run:
         name: install dependencies
         command: |
           python3 -m venv venv
           . venv/bin/activate 
           make install
           wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v1.22.1/hadolint-Linux-x86_64 &&\
           chmod +x hadolint &&\
           mv hadolint /bin/
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

# run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile --ignore DL400 --ignore DL3042

  build:
    docker:
      - image: circleci/python:3.8.0
        auth:
          username: lexarflash8g
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching:
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          curl -H "Content-Type: text/plain" -H "token: 789afc89-98ce-4b01-ba32-68736d639b50" --request PUT --data "$TAG" https://api.memstash.io/values/TAG
          docker build -t lexarflash8g/python-flask-aws:$TAG .
          echo "$DOCKER_PASS" | docker login --username lexarflash8g --password-stdin
          docker push lexarflash8g/python-flask-aws:$TAG


  build-infrastructure:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install gzip tar
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file kubernetes.yaml \
            --tags project=python-flask-aws \
            --stack-name "kubernetes-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides EKSClusterName=eksclusterprod EKSIAMRoleName=eksrole-iam \
            --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 20m
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
      - run: 
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: authenticate k8s
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name eksclusterprod
            kubectl get nodes
            kubectl get pods 
      - run:
          name: deploy manifests
          command: |
            cd manifests
            yum install gettext -y
            TAG=$(curl -H "token: 789afc89-98ce-4b01-ba32-68736d639b50" --request GET https://api.memstash.io/values/TAG)
            export TAG=$(curl -H "token: 789afc89-98ce-4b01-ba32-68736d639b50" --request GET https://api.memstash.io/values/TAG)
            echo $TAG
            envsubst < python-flask.yml > python-flask-tag.yml
            cat python-flask-tag.yml
            cat python-flask-tag.yml | envsubst | kubectl apply -f -
            sleep 40
            kubectl get pods
            kubectl get svc
            ENDPOINT=`kubectl get svc python-flask-aws -o yaml | grep hostname | awk '{print $3}'`
            curl -H "Content-Type: text/plain" -H "token: 789afc89-98ce-4b01-ba32-68736d639b50" --request PUT --data "$ENDPOINT" https://api.memstash.io/values/ENDPOINT    
      - run: 
          name: perform a rolling update
          command: |
            cd manifests
            export TAG=latest
            cat rollingupdate.yml | envsubst | kubectl apply -f -
      - destroy-environment
  
  smoke_test:
    docker:
      - image: circleci/python:3.8.0
    steps:
      - checkout
      - run: 
          name: smoke test to make sure endpoint is accessible
          command: |
            ENDPOINT=$(curl -H "token: 789afc89-98ce-4b01-ba32-68736d639b50" --request GET https://api.memstash.io/values/ENDPOINT)
            curl $ENDPOINT:81
      

          
            
    
workflows:
    build_and_test:
      jobs:
        - deploy-infrastructure:
            requires:
              - build
        - build
        #    requires:
        #      - lint
        #- deploy-infrastructure:
        #    requires: [build-infrastructure, build, lint]
        #- build-infrastructure:
        #    requires: [build, lint] 
        #- smoke_test:
        #    requires: [build,lint,build-infrastructure, deploy-infrastructure]
 